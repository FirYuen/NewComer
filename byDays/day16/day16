day16学习笔记

一.源码学习
1.继续看RTCTest
	//每过0.1秒，修改界面时间，超过3秒则不改变
    private void setTimeText() {
        mContent.postDelayed(new Runnable() {
            public void run() {
                mContent.setText(getResources().getText(R.string.rtc_tag) + getTime());
                mContent.setTextSize(35);
                if (System.currentTimeMillis() - mTime > 3000) {
                }
                else {
					//使用递归的方式
                    setTimeText();
                }
            }
        }, 100);
    }


2.BackLightTest 背光测试
//看到onCreate方法中，也新建了Runnable对象，用于给handler对象递归调用
		//mContent当前view
        mContent = new TextView(this);
        setContentView(mContent);
		//调用android.graphics.Color中定义的颜色常量
		private static final int[] COLOR_ARRAY = new int[]{Color.WHITE, Color.BLACK};
		//变化下标，统计次数
		private int mIndex = 0, mCount = 0;
		private static final int TIMES = 3;
		//Runnable对象，用于递归调用
        mRunnable = new Runnable() {
            public void run() {
				//直接使用View的setBackgroundColor改变背景色
                mContent.setBackgroundColor(COLOR_ARRAY[mIndex]);
                //mPowerManager.engMode_ButtonOn(KEY_BG_LIGHT_ARRAY[mIndex]);
                mIndex = 1 - mIndex;
                mCount++;
                setBackground();
            }
        };
		setBackground();
		
	//setBackground()递归调用的入口，限定变化次数4次，每次间隔600ms
    private void setBackground() {
        if (mCount > TIMES) {
           // showResultDialog(getString(R.string.backlight_des));
            return;
        }
        mUiHandler.postDelayed(mRunnable, 600);
    }
	
	//最后销毁时，移除Runnable对象
    public void onDestroy() {
        mUiHandler.removeCallbacks(mRunnable);
        super.onDestroy();
    }
	
3.ScreenColorTest 屏幕色彩测试
这个和上面一样的方法，就是改下颜色的数组
private static final int[] COLOR_ARRAY = new int[] {Color.WHITE, Color.RED, Color.GREEN, Color.BLUE, Color.YELLOW};
       
	   mRunnable = new Runnable() {
            public void run() {
                mContent.setBackgroundColor(COLOR_ARRAY[mIndex]);
                mIndex++;
                mCount++;
                setBackground();
            }
        };

4.SingleTouchPointTest 单点测试

//onCreate方法，布局TextView+SurfaceView
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
		//设置常亮
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
        setContentView(R.layout.single_touch_test);
        TextView text = (TextView) findViewById(R.id.title_text);
        text.setText(getString(R.string.touchpoint_info));
		
		//DisplayMetrics类用于获取分辨率信息
        this.mDisplayMetrics = new DisplayMetrics();
        mScreenWidth = mDisplayMetrics.widthPixels;
        getWindowManager().getDefaultDisplay().getMetrics(this.mDisplayMetrics);
		
        //获取屏幕长宽
		mScreenWidth = getWindowManager().getDefaultDisplay().getWidth();
        mScreenHeight = getWindowManager().getDefaultDisplay().getHeight();
        mSurfaceView = (SurfaceView) findViewById(R.id.surface_point);
		
		//获取Holder控制SurfaceView
        mHolder = mSurfaceView.getHolder();
        mHolder.addCallback(new Callback() {
            public void surfaceDestroyed(SurfaceHolder holder) {
            }
			
			//当该SurfaceView创建时
            public void surfaceCreated(SurfaceHolder holder) {
				//锁定画布Canvas并返回该Canvas对象
                Canvas canvas = mHolder.lockCanvas();
				//着色白色
                canvas.drawColor(Color.WHITE);
				//在画布上开始画东西--
                startDraw(canvas);
				//显示触点坐标,初始(0,0)
                showCoordinate(canvas, 0, 0);
				//结束锁定画图，并提交改变。
                mHolder.unlockCanvasAndPost(canvas);
            }

            public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
            }
        });
		//获取圆心的坐标list
        mCirclesList = getCirclesList();
        //super.onCreate(savedInstanceState);
        super.removeButton();
    }

	
	//获取圆心的坐标list，按对角线分成两组，圆心到邻近边的距离90px
	//Android屏幕坐标，左上角(0,0),向右x增加，向下y增加
    protected List<List<float[]>> getCirclesList() {
        float horizontalXY1[] = {
                DISTANCE, DISTANCE, mScreenWidth - DISTANCE, mScreenHeight - DISTANCE
        };
        List<float[]> horizontalList = new ArrayList<float[]>();
        horizontalList.add(horizontalXY1);

        float verticalXY1[] = {
                mScreenWidth - DISTANCE, DISTANCE, DISTANCE, mScreenHeight - DISTANCE
        };
        List<float[]> verticalList = new ArrayList<float[]>();
        verticalList.add(verticalXY1);

		//horizontalList:左上-右下；verticalList：右上-左下
        List<List<float[]>> centrePointList = new ArrayList<List<float[]>>();
        centrePointList.add(horizontalList);
        centrePointList.add(verticalList);
        return centrePointList;
    }
	
	//在画布上开始画
    private void startDraw(Canvas canvas) {
        if (mCirclesList == null || mCirclesList.isEmpty()) {
            return;
        }
        int iTag = 0;
        for (List<float[]> circles : mCirclesList) {
			//分成两组分别画出圆和边界线，分别着色蓝色和灰色
            for (int i = 0; i < circles.size(); i++) {
                drawShapes(circles.get(i)[CIRCLE_X_1], circles.get(i)[CIRCLE_Y_1],
                        circles.get(i)[CIRCLE_X_2], circles.get(i)[CIRCLE_Y_2], canvas,
                        getRadiusPx(), iTag);
            }
			//画笔换成红色，把触点连成一条线
            Paint paint = new Paint();
			//抗锯齿
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(STOKEN_WIDTH);
            paint.setColor(Color.RED);
            for (int i = 1; i < mPointList.size(); i++) {
                canvas.drawLine(mPointList.get(i - 1)[0], mPointList.get(i - 1)[1],
                        mPointList.get(i)[0],
                        mPointList.get(i)[1], paint);
            }
            iTag++;
        }
	}
	
	
	MotionEvent中ACTION_DOWN: 表示用户开始触摸.ACTION_MOVE: 表示用户在移动(手指或者其他)。ACTION_UP:表示用户抬起了手指 
	event.getPointerCount();  获取当前触点个数
	
	//这个函数返回true代表这个事件已经做完，可以响应下一个事件
    @Override
    public boolean onTouchEvent(MotionEvent event) {
        if (mCirclesList == null || mCirclesList.isEmpty()) {
            return false;
        }
        List<float[]> circles = mCirclesList.get(0);
        if (circles == null || circles.isEmpty()) {
            return false;
        }
        int pointCount = event.getPointerCount();
		//只有当触点个数为1时，进入if
        if (pointCount == 1) {
            int action = event.getAction();
            float touchX = event.getX();
            float touchY = event.getY();
            switch (action) {
			
				//开始触摸时
                case MotionEvent.ACTION_DOWN:
					//判断这个触点是否在本组圆内(比较坐标到圆心的距离)，若在内，返回该圆的圆心坐标；
					//若不在内，返回null
                    mMatchCircleXY = getMatchCircle(circles, touchX, touchY,
                            getRadiusPx());
                    if (mMatchCircleXY == null) {
                        return false;
                    }
                    mIsInCircle = true;
					//将(touchX, touchY)加入mPointList中
                    setXY(touchX, touchY);
                    break;
					
				//当用户抬起了手指时，可以先看下面move,在回头看这个
                case MotionEvent.ACTION_UP:
                    if (mHolder == null || mPointList == null) {
                        return false;
                    }
                    mPointList.clear();
                    /*SPRD: fix bug370169 avoid nullpointer @{*/ //当这个surface有效时继续
                    if(mHolder.getSurface().isValid()){
                    /* @}*/
                        Canvas canvasUp = mHolder.lockCanvas();
                        mIsUpcanvasUnlocked = false;
                        if (canvasUp != null && this.hasWindowFocus()) {
                            canvasUp.drawColor(Color.WHITE);
                        }
						//当本次第一触点在圆内时
                        if (mIsInCircle) {
						//当抬起时，触点在圆内
                            if (isInCircle(touchX, touchY, mMatchCircleXY[0],
                                    mMatchCircleXY[1], getRadiusPx())) {
								//画完一条线，就删一组坐标
                                if (!circles.isEmpty()) {
                                    if (mCirclePosition >= 0) {
                                        circles.remove(mCirclePosition);
                                    }
                                }
                                if (circles.isEmpty()) {
                                    mCirclesList.remove(0);
                                }
								//当两条线都画完，提示pass，存储结果为true，结束该活动
                                if (mCirclesList.isEmpty()) {
                                    Toast.makeText(this, R.string.text_pass, Toast.LENGTH_SHORT).show();
                                    storeRusult(true);
                                    if(!mIsUpcanvasUnlocked) {
                                          mHolder.unlockCanvasAndPost(canvasUp);
                                    }
                                    this.finish();
                                    return false;
                                }
                            } else {
							//抬起位置不对，存储false
                                storeRusult(false);
                            }
                            mTouchUpX = touchX;
                            mTouchUpY = touchY;
                        }
						//重置变量
                        mIsInCircle = false;
                        mCirclePosition = -1;
                        mMatchCircleXY = null;
                        mPointList.clear();
                        startDraw(canvasUp);
                        showCoordinate(canvasUp, mTouchUpX, mTouchUpY);
                        mHolder.unlockCanvasAndPost(canvasUp);
                        mIsUpcanvasUnlocked = true;
                    }
                    break;
				
				//在滑动状态时
                case MotionEvent.ACTION_MOVE:
                    if (!mIsInCircle || mHolder == null || mPointList == null) {
                        return false;
                    }
                    /*SPRD: fix bug370169 avoid nullpointer @{*/ //当这个surface有效时继续
                    if(mHolder.getSurface().isValid()){
                    /* @}*/
                        Canvas canvasMove = mHolder.lockCanvas();
						
						//先着色白色
                        if (canvasMove != null && this.hasWindowFocus()) {
                            canvasMove.drawColor(Color.WHITE);
                        }
						//取得本次第一触点进入的圆的圆心坐标组
                        float[] match = circles.get(mCirclePosition);
						
						//isInner方法判断当前触点是否在两条平行边界间(计算该点到两条平行线中间线的距离d，
						//若d<r,则返回true)这时进入这个if,添加当前坐标到mPointList.显示坐标
						
                        if (isInner(touchX, touchY, match[CIRCLE_X_1],
                                match[CIRCLE_Y_1], match[CIRCLE_X_2],
                                match[CIRCLE_Y_2], getRadiusPx())) {
                            setXY(touchX, touchY);
                            showCoordinate(canvasMove, touchX, touchY);
                        } else {
						//若不在区域内，存储false到数据库，其他变量重置，重画
                            storeRusult(false);
                            mIsInCircle = false;
                            mCirclePosition = -1;
                            mMatchCircleXY = null;
                            mPointList.clear();
                        }
                        startDraw(canvasMove);
                        mHolder.unlockCanvasAndPost(canvasMove);
                    }
                    break;
                default:
                    break;
            }
        }else{
            if(mPointList != null){
                 mPointList.clear();
            }
            mIsInCircle = false;
        }
        return super.onTouchEvent(event);
    }	

	
5.MutiTouchTest 多点测试

//布局TextView、MuiltImageView
//看这个MuiltImageView

    private class MuiltImageView extends View {
        private static final float RADIUS = 75f;	//半径
        private PointF pointf = new PointF();	//触点1
        private PointF points = new PointF();	//触点2
        private Handler mHandler;	//Handler对象用于传递消息
        private boolean mPass = false;
        private int mWidth, mHeight;	//长宽

		//构造方法
        public MuiltImageView(Context context, int width, int height, Handler handler){
            super(context);
            mWidth = width;
            mHeight = height;
            mHandler = handler;
            initData();
        }
		
		//具体传入的构造参数(根据DisplayMetrics类获取长宽)
        mImgView = new MuiltImageView(this, mDisplayMetrics.widthPixels,mDisplayMetrics.heightPixels, mHandler);
		
		//再看下Handler对象
    private class MainHandler extends Handler{
        @Override //用于传递消息，what=1时，表示pass，存贮结果true，并结束该活动
        public void handleMessage(Message msg){
            if (msg.what == 1) {
                Toast.makeText(mContext, R.string.text_pass, Toast.LENGTH_SHORT).show();
                finish();
                storeRusult(true);
            }
        }
    }
	
	//回到MuiltImageView类，看到onDraw方法，画了两个圆
	        @Override
        protected void onDraw(Canvas canvas){
            super.onDraw(canvas);
            Paint paint = new Paint();
            paint.setAntiAlias(true);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(Color.YELLOW);
            canvas.drawCircle(pointf.x, pointf.y, RADIUS, paint);
            canvas.drawCircle(points.x, points.y, RADIUS, paint);
        }

	//再看onTouchEvent方法
        public boolean onTouchEvent(MotionEvent event){
			//只有触点为2时进入
            if (event.getPointerCount() == 2){
                pointf.set(event.getX(0), event.getY(0));
                points.set(event.getX(1), event.getY(1));
				//按当前触点间距与宽度比较，判断能否通过(间距>2/3宽度 或 <1/3宽度 通过)
                double distance = Math.sqrt((pointf.x - points.x) * (pointf.x - points.x)
                        + (pointf.y - points.y) * (pointf.y - points.y));
                if (distance < mWidth / 3 || distance > mWidth / 3 * 2) {
                    mPass = true;
                }
            }
			//手指抬起时，若pass则传递消息pass
            if (event.getAction() == MotionEvent.ACTION_UP && mPass) {
                mHandler.sendEmptyMessage(1);
            }
            invalidate();
            return true;
        }


	
    
	

		

